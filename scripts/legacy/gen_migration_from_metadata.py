"""Generate an Alembic migration file from SQLAlchemy metadata by emitting CREATE TABLE DDL.

This writes a file into `alembic/versions/` named like `autogen_YYYYmmddHHMMSS_initial_autogen.py`.
"""
from sqlalchemy import create_engine
import sqlalchemy as sa
import os
from datetime import datetime

ROOT = os.path.dirname(os.path.dirname(__file__))
os.chdir(ROOT)

from db.models import Base

engine = create_engine('sqlite:///./data/stl_manager.db')
tables = list(Base.metadata.sorted_tables)
if not tables:
    print('No tables found in metadata')
    raise SystemExit(1)

ddls = []
for t in tables:
    ddl = str(sa.schema.CreateTable(t).compile(dialect=engine.dialect)).strip()
    ddls.append(ddl + ';')

rev_id = datetime.utcnow().strftime('autogen_%Y%m%d%H%M%S')
filename = f'alembic/versions/{rev_id}_initial_autogen.py'
os.makedirs(os.path.dirname(filename), exist_ok=True)
with open(filename, 'w', encoding='utf-8') as f:
    f.write('"""autogenerated DDL migration\n\n')
    f.write(f'Revision ID: {rev_id}\nRevises:\nCreate Date: {datetime.utcnow().isoformat()}\n')
    f.write('"""\n\n')
    f.write('from alembic import op\nimport sqlalchemy as sa\n\n')
    f.write(f"revision = '{rev_id}'\n")
    f.write("down_revision = None\nbranch_labels = None\ndepends_on = None\n\n\n")
    f.write('def upgrade():\n')
    for ddl in ddls:
        f.write('    op.execute("""%s""")\n' % ddl.replace('"""', '\\\"\\\"\\\"'))
    f.write('\n\ndef downgrade():\n')
    for t in reversed(tables):
        f.write(f"    op.execute(\"DROP TABLE IF EXISTS {t.name};\")\n")

print('Wrote migration file:', filename)
